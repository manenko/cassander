/* automatically generated by rust-bindgen 0.69.4 */

pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const CASS_VERSION_MAJOR: u32 = 2;
pub const CASS_VERSION_MINOR: u32 = 17;
pub const CASS_VERSION_PATCH: u32 = 1;
pub const CASS_VERSION_SUFFIX: &[u8; 1] = b"\0";
pub const CASS_UINT64_MAX: i32 = -1;
pub const CASS_INET_V4_LENGTH: u32 = 4;
pub const CASS_INET_V6_LENGTH: u32 = 16;
pub const CASS_INET_STRING_LENGTH: u32 = 46;
pub const CASS_UUID_STRING_LENGTH: u32 = 37;
pub const CASS_LOG_MAX_MESSAGE_SIZE: u32 = 1024;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union union___mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_union___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<union___mbstate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<union___mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(union___mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<union___mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(union___mbstate_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(union___mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(union___mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __mbstate_t = union___mbstate_t;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
    >,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut struct___darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout_struct___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<struct___darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct___darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(struct___darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<struct___darwin_pthread_handler_rec>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct___darwin_pthread_handler_rec)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct___darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct___darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct___darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(struct__opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(struct__opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_condattr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct__opaque_pthread_condattr_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(struct__opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_mutexattr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct__opaque_pthread_mutexattr_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(struct__opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(struct__opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct__opaque_pthread_rwlockattr_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct__opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut struct___darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout_struct__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct__opaque_pthread_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct__opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(struct__opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct__opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(struct__opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct__opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut struct__opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const enum_cass_bool_t_cass_false: enum_cass_bool_t = 0;
pub const enum_cass_bool_t_cass_true: enum_cass_bool_t = 1;
pub type enum_cass_bool_t = ::std::os::raw::c_uint;
pub use self::enum_cass_bool_t as cass_bool_t;
pub type cass_float_t = f32;
pub type cass_double_t = f64;
pub type cass_int8_t = i8;
pub type cass_uint8_t = u8;
pub type cass_int16_t = i16;
pub type cass_uint16_t = u16;
pub type cass_int32_t = i32;
pub type cass_uint32_t = u32;
pub type cass_int64_t = i64;
pub type cass_uint64_t = u64;
pub type cass_byte_t = cass_uint8_t;
pub type cass_duration_t = cass_uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassInet_ {
    pub address: [cass_uint8_t; 16usize],
    pub address_length: cass_uint8_t,
}
#[test]
fn bindgen_test_layout_struct_CassInet_() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassInet_> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassInet_>(),
        17usize,
        concat!("Size of: ", stringify!(struct_CassInet_))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassInet_>(),
        1usize,
        concat!("Alignment of ", stringify!(struct_CassInet_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassInet_),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).address_length) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassInet_),
            "::",
            stringify!(address_length)
        )
    );
}
pub type CassInet = struct_CassInet_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassUuid_ {
    pub time_and_version: cass_uint64_t,
    pub clock_seq_and_node: cass_uint64_t,
}
#[test]
fn bindgen_test_layout_struct_CassUuid_() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassUuid_> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassUuid_>(),
        16usize,
        concat!("Size of: ", stringify!(struct_CassUuid_))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassUuid_>(),
        8usize,
        concat!("Alignment of ", stringify!(struct_CassUuid_))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).time_and_version) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassUuid_),
            "::",
            stringify!(time_and_version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).clock_seq_and_node) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassUuid_),
            "::",
            stringify!(clock_seq_and_node)
        )
    );
}
pub type CassUuid = struct_CassUuid_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassCluster_ {
    _unused: [u8; 0],
}
pub type CassCluster = struct_CassCluster_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassSession_ {
    _unused: [u8; 0],
}
pub type CassSession = struct_CassSession_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassStatement_ {
    _unused: [u8; 0],
}
pub type CassStatement = struct_CassStatement_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassBatch_ {
    _unused: [u8; 0],
}
pub type CassBatch = struct_CassBatch_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassFuture_ {
    _unused: [u8; 0],
}
pub type CassFuture = struct_CassFuture_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassPrepared_ {
    _unused: [u8; 0],
}
pub type CassPrepared = struct_CassPrepared_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassResult_ {
    _unused: [u8; 0],
}
pub type CassResult = struct_CassResult_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassErrorResult_ {
    _unused: [u8; 0],
}
pub type CassErrorResult = struct_CassErrorResult_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassNode_ {
    _unused: [u8; 0],
}
pub type CassNode = struct_CassNode_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassIterator_ {
    _unused: [u8; 0],
}
pub type CassIterator = struct_CassIterator_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassRow_ {
    _unused: [u8; 0],
}
pub type CassRow = struct_CassRow_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassValue_ {
    _unused: [u8; 0],
}
pub type CassValue = struct_CassValue_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassDataType_ {
    _unused: [u8; 0],
}
pub type CassDataType = struct_CassDataType_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassFunctionMeta_ {
    _unused: [u8; 0],
}
pub type CassFunctionMeta = struct_CassFunctionMeta_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassAggregateMeta_ {
    _unused: [u8; 0],
}
pub type CassAggregateMeta = struct_CassAggregateMeta_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassCollection_ {
    _unused: [u8; 0],
}
pub type CassCollection = struct_CassCollection_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassTuple_ {
    _unused: [u8; 0],
}
pub type CassTuple = struct_CassTuple_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassUserType_ {
    _unused: [u8; 0],
}
pub type CassUserType = struct_CassUserType_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassSsl_ {
    _unused: [u8; 0],
}
pub type CassSsl = struct_CassSsl_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassVersion_ {
    pub major_version: ::std::os::raw::c_int,
    pub minor_version: ::std::os::raw::c_int,
    pub patch_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_struct_CassVersion_() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassVersion_> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassVersion_>(),
        12usize,
        concat!("Size of: ", stringify!(struct_CassVersion_))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassVersion_>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_CassVersion_))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).major_version) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassVersion_),
            "::",
            stringify!(major_version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minor_version) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassVersion_),
            "::",
            stringify!(minor_version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).patch_version) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassVersion_),
            "::",
            stringify!(patch_version)
        )
    );
}
pub type CassVersion = struct_CassVersion_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassSchemaMeta_ {
    _unused: [u8; 0],
}
pub type CassSchemaMeta = struct_CassSchemaMeta_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassKeyspaceMeta_ {
    _unused: [u8; 0],
}
pub type CassKeyspaceMeta = struct_CassKeyspaceMeta_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassTableMeta_ {
    _unused: [u8; 0],
}
pub type CassTableMeta = struct_CassTableMeta_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassMaterializedViewMeta_ {
    _unused: [u8; 0],
}
pub type CassMaterializedViewMeta = struct_CassMaterializedViewMeta_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassColumnMeta_ {
    _unused: [u8; 0],
}
pub type CassColumnMeta = struct_CassColumnMeta_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassIndexMeta_ {
    _unused: [u8; 0],
}
pub type CassIndexMeta = struct_CassIndexMeta_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassUuidGen_ {
    _unused: [u8; 0],
}
pub type CassUuidGen = struct_CassUuidGen_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassTimestampGen_ {
    _unused: [u8; 0],
}
pub type CassTimestampGen = struct_CassTimestampGen_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassRetryPolicy_ {
    _unused: [u8; 0],
}
pub type CassRetryPolicy = struct_CassRetryPolicy_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassCustomPayload_ {
    _unused: [u8; 0],
}
pub type CassCustomPayload = struct_CassCustomPayload_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassMetrics_ {
    pub requests: struct_CassMetrics___bindgen_ty_1,
    pub stats: struct_CassMetrics___bindgen_ty_2,
    pub errors: struct_CassMetrics___bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassMetrics___bindgen_ty_1 {
    pub min: cass_uint64_t,
    pub max: cass_uint64_t,
    pub mean: cass_uint64_t,
    pub stddev: cass_uint64_t,
    pub median: cass_uint64_t,
    pub percentile_75th: cass_uint64_t,
    pub percentile_95th: cass_uint64_t,
    pub percentile_98th: cass_uint64_t,
    pub percentile_99th: cass_uint64_t,
    pub percentile_999th: cass_uint64_t,
    pub mean_rate: cass_double_t,
    pub one_minute_rate: cass_double_t,
    pub five_minute_rate: cass_double_t,
    pub fifteen_minute_rate: cass_double_t,
}
#[test]
fn bindgen_test_layout_struct_CassMetrics___bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassMetrics___bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassMetrics___bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(struct_CassMetrics___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassMetrics___bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct_CassMetrics___bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mean) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stddev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(stddev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).median) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(median)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_75th) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(percentile_75th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_95th) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(percentile_95th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_98th) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(percentile_98th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_99th) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(percentile_99th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_999th) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(percentile_999th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mean_rate) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(mean_rate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).one_minute_rate) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(one_minute_rate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).five_minute_rate) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(five_minute_rate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fifteen_minute_rate) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_1),
            "::",
            stringify!(fifteen_minute_rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassMetrics___bindgen_ty_2 {
    pub total_connections: cass_uint64_t,
    pub available_connections: cass_uint64_t,
    pub exceeded_pending_requests_water_mark: cass_uint64_t,
    pub exceeded_write_bytes_water_mark: cass_uint64_t,
}
#[test]
fn bindgen_test_layout_struct_CassMetrics___bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassMetrics___bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassMetrics___bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(struct_CassMetrics___bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassMetrics___bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct_CassMetrics___bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_connections) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_2),
            "::",
            stringify!(total_connections)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).available_connections) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_2),
            "::",
            stringify!(available_connections)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exceeded_pending_requests_water_mark)
                as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_2),
            "::",
            stringify!(exceeded_pending_requests_water_mark)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exceeded_write_bytes_water_mark)
                as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_2),
            "::",
            stringify!(exceeded_write_bytes_water_mark)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassMetrics___bindgen_ty_3 {
    pub connection_timeouts: cass_uint64_t,
    pub pending_request_timeouts: cass_uint64_t,
    pub request_timeouts: cass_uint64_t,
}
#[test]
fn bindgen_test_layout_struct_CassMetrics___bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassMetrics___bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassMetrics___bindgen_ty_3>(),
        24usize,
        concat!("Size of: ", stringify!(struct_CassMetrics___bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassMetrics___bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct_CassMetrics___bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_timeouts) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_3),
            "::",
            stringify!(connection_timeouts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pending_request_timeouts) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_3),
            "::",
            stringify!(pending_request_timeouts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).request_timeouts) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics___bindgen_ty_3),
            "::",
            stringify!(request_timeouts)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_CassMetrics_() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassMetrics_> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassMetrics_>(),
        168usize,
        concat!("Size of: ", stringify!(struct_CassMetrics_))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassMetrics_>(),
        8usize,
        concat!("Alignment of ", stringify!(struct_CassMetrics_))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).requests) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics_),
            "::",
            stringify!(requests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stats) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics_),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassMetrics_),
            "::",
            stringify!(errors)
        )
    );
}
pub type CassMetrics = struct_CassMetrics_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassSpeculativeExecutionMetrics_ {
    pub min: cass_uint64_t,
    pub max: cass_uint64_t,
    pub mean: cass_uint64_t,
    pub stddev: cass_uint64_t,
    pub median: cass_uint64_t,
    pub percentile_75th: cass_uint64_t,
    pub percentile_95th: cass_uint64_t,
    pub percentile_98th: cass_uint64_t,
    pub percentile_99th: cass_uint64_t,
    pub percentile_999th: cass_uint64_t,
    pub count: cass_uint64_t,
    pub percentage: cass_double_t,
}
#[test]
fn bindgen_test_layout_struct_CassSpeculativeExecutionMetrics_() {
    const UNINIT: ::std::mem::MaybeUninit<
        struct_CassSpeculativeExecutionMetrics_,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassSpeculativeExecutionMetrics_>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassSpeculativeExecutionMetrics_>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct_CassSpeculativeExecutionMetrics_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mean) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stddev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(stddev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).median) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(median)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_75th) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(percentile_75th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_95th) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(percentile_95th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_98th) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(percentile_98th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_99th) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(percentile_99th)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentile_999th) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(percentile_999th)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).percentage) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassSpeculativeExecutionMetrics_),
            "::",
            stringify!(percentage)
        )
    );
}
pub type CassSpeculativeExecutionMetrics =
    struct_CassSpeculativeExecutionMetrics_;
pub const enum_CassConsistency__CASS_CONSISTENCY_UNKNOWN:
    enum_CassConsistency_ = 65535;
pub const enum_CassConsistency__CASS_CONSISTENCY_ANY: enum_CassConsistency_ = 0;
pub const enum_CassConsistency__CASS_CONSISTENCY_ONE: enum_CassConsistency_ = 1;
pub const enum_CassConsistency__CASS_CONSISTENCY_TWO: enum_CassConsistency_ = 2;
pub const enum_CassConsistency__CASS_CONSISTENCY_THREE: enum_CassConsistency_ =
    3;
pub const enum_CassConsistency__CASS_CONSISTENCY_QUORUM: enum_CassConsistency_ =
    4;
pub const enum_CassConsistency__CASS_CONSISTENCY_ALL: enum_CassConsistency_ = 5;
pub const enum_CassConsistency__CASS_CONSISTENCY_LOCAL_QUORUM:
    enum_CassConsistency_ = 6;
pub const enum_CassConsistency__CASS_CONSISTENCY_EACH_QUORUM:
    enum_CassConsistency_ = 7;
pub const enum_CassConsistency__CASS_CONSISTENCY_SERIAL: enum_CassConsistency_ =
    8;
pub const enum_CassConsistency__CASS_CONSISTENCY_LOCAL_SERIAL:
    enum_CassConsistency_ = 9;
pub const enum_CassConsistency__CASS_CONSISTENCY_LOCAL_ONE:
    enum_CassConsistency_ = 10;
pub type enum_CassConsistency_ = ::std::os::raw::c_uint;
pub use self::enum_CassConsistency_ as CassConsistency;
pub const enum_CassWriteType__CASS_WRITE_TYPE_UNKNOWN: enum_CassWriteType_ = 0;
pub const enum_CassWriteType__CASS_WRITE_TYPE_SIMPLE: enum_CassWriteType_ = 1;
pub const enum_CassWriteType__CASS_WRITE_TYPE_BATCH: enum_CassWriteType_ = 2;
pub const enum_CassWriteType__CASS_WRITE_TYPE_UNLOGGED_BATCH:
    enum_CassWriteType_ = 3;
pub const enum_CassWriteType__CASS_WRITE_TYPE_COUNTER: enum_CassWriteType_ = 4;
pub const enum_CassWriteType__CASS_WRITE_TYPE_BATCH_LOG: enum_CassWriteType_ =
    5;
pub const enum_CassWriteType__CASS_WRITE_TYPE_CAS: enum_CassWriteType_ = 6;
pub const enum_CassWriteType__CASS_WRITE_TYPE_VIEW: enum_CassWriteType_ = 7;
pub const enum_CassWriteType__CASS_WRITE_TYPE_CDC: enum_CassWriteType_ = 8;
pub type enum_CassWriteType_ = ::std::os::raw::c_uint;
pub use self::enum_CassWriteType_ as CassWriteType;
pub const enum_CassColumnType__CASS_COLUMN_TYPE_REGULAR: enum_CassColumnType_ =
    0;
pub const enum_CassColumnType__CASS_COLUMN_TYPE_PARTITION_KEY:
    enum_CassColumnType_ = 1;
pub const enum_CassColumnType__CASS_COLUMN_TYPE_CLUSTERING_KEY:
    enum_CassColumnType_ = 2;
pub const enum_CassColumnType__CASS_COLUMN_TYPE_STATIC: enum_CassColumnType_ =
    3;
pub const enum_CassColumnType__CASS_COLUMN_TYPE_COMPACT_VALUE:
    enum_CassColumnType_ = 4;
pub type enum_CassColumnType_ = ::std::os::raw::c_uint;
pub use self::enum_CassColumnType_ as CassColumnType;
pub const enum_CassIndexType__CASS_INDEX_TYPE_UNKNOWN: enum_CassIndexType_ = 0;
pub const enum_CassIndexType__CASS_INDEX_TYPE_KEYS: enum_CassIndexType_ = 1;
pub const enum_CassIndexType__CASS_INDEX_TYPE_CUSTOM: enum_CassIndexType_ = 2;
pub const enum_CassIndexType__CASS_INDEX_TYPE_COMPOSITES: enum_CassIndexType_ =
    3;
pub type enum_CassIndexType_ = ::std::os::raw::c_uint;
pub use self::enum_CassIndexType_ as CassIndexType;
pub const enum_CassValueType__CASS_VALUE_TYPE_UNKNOWN: enum_CassValueType_ =
    65535;
pub const enum_CassValueType__CASS_VALUE_TYPE_CUSTOM: enum_CassValueType_ = 0;
pub const enum_CassValueType__CASS_VALUE_TYPE_ASCII: enum_CassValueType_ = 1;
pub const enum_CassValueType__CASS_VALUE_TYPE_BIGINT: enum_CassValueType_ = 2;
pub const enum_CassValueType__CASS_VALUE_TYPE_BLOB: enum_CassValueType_ = 3;
pub const enum_CassValueType__CASS_VALUE_TYPE_BOOLEAN: enum_CassValueType_ = 4;
pub const enum_CassValueType__CASS_VALUE_TYPE_COUNTER: enum_CassValueType_ = 5;
pub const enum_CassValueType__CASS_VALUE_TYPE_DECIMAL: enum_CassValueType_ = 6;
pub const enum_CassValueType__CASS_VALUE_TYPE_DOUBLE: enum_CassValueType_ = 7;
pub const enum_CassValueType__CASS_VALUE_TYPE_FLOAT: enum_CassValueType_ = 8;
pub const enum_CassValueType__CASS_VALUE_TYPE_INT: enum_CassValueType_ = 9;
pub const enum_CassValueType__CASS_VALUE_TYPE_TEXT: enum_CassValueType_ = 10;
pub const enum_CassValueType__CASS_VALUE_TYPE_TIMESTAMP: enum_CassValueType_ =
    11;
pub const enum_CassValueType__CASS_VALUE_TYPE_UUID: enum_CassValueType_ = 12;
pub const enum_CassValueType__CASS_VALUE_TYPE_VARCHAR: enum_CassValueType_ = 13;
pub const enum_CassValueType__CASS_VALUE_TYPE_VARINT: enum_CassValueType_ = 14;
pub const enum_CassValueType__CASS_VALUE_TYPE_TIMEUUID: enum_CassValueType_ =
    15;
pub const enum_CassValueType__CASS_VALUE_TYPE_INET: enum_CassValueType_ = 16;
pub const enum_CassValueType__CASS_VALUE_TYPE_DATE: enum_CassValueType_ = 17;
pub const enum_CassValueType__CASS_VALUE_TYPE_TIME: enum_CassValueType_ = 18;
pub const enum_CassValueType__CASS_VALUE_TYPE_SMALL_INT: enum_CassValueType_ =
    19;
pub const enum_CassValueType__CASS_VALUE_TYPE_TINY_INT: enum_CassValueType_ =
    20;
pub const enum_CassValueType__CASS_VALUE_TYPE_DURATION: enum_CassValueType_ =
    21;
pub const enum_CassValueType__CASS_VALUE_TYPE_LIST: enum_CassValueType_ = 32;
pub const enum_CassValueType__CASS_VALUE_TYPE_MAP: enum_CassValueType_ = 33;
pub const enum_CassValueType__CASS_VALUE_TYPE_SET: enum_CassValueType_ = 34;
pub const enum_CassValueType__CASS_VALUE_TYPE_UDT: enum_CassValueType_ = 48;
pub const enum_CassValueType__CASS_VALUE_TYPE_TUPLE: enum_CassValueType_ = 49;
pub const enum_CassValueType__CASS_VALUE_TYPE_LAST_ENTRY: enum_CassValueType_ =
    50;
pub type enum_CassValueType_ = ::std::os::raw::c_uint;
pub use self::enum_CassValueType_ as CassValueType;
pub const enum_CassClusteringOrder__CASS_CLUSTERING_ORDER_NONE:
    enum_CassClusteringOrder_ = 0;
pub const enum_CassClusteringOrder__CASS_CLUSTERING_ORDER_ASC:
    enum_CassClusteringOrder_ = 1;
pub const enum_CassClusteringOrder__CASS_CLUSTERING_ORDER_DESC:
    enum_CassClusteringOrder_ = 2;
pub type enum_CassClusteringOrder_ = ::std::os::raw::c_uint;
pub use self::enum_CassClusteringOrder_ as CassClusteringOrder;
pub const enum_CassCollectionType__CASS_COLLECTION_TYPE_LIST:
    enum_CassCollectionType_ = 32;
pub const enum_CassCollectionType__CASS_COLLECTION_TYPE_MAP:
    enum_CassCollectionType_ = 33;
pub const enum_CassCollectionType__CASS_COLLECTION_TYPE_SET:
    enum_CassCollectionType_ = 34;
pub type enum_CassCollectionType_ = ::std::os::raw::c_uint;
pub use self::enum_CassCollectionType_ as CassCollectionType;
pub const enum_CassBatchType__CASS_BATCH_TYPE_LOGGED: enum_CassBatchType_ = 0;
pub const enum_CassBatchType__CASS_BATCH_TYPE_UNLOGGED: enum_CassBatchType_ = 1;
pub const enum_CassBatchType__CASS_BATCH_TYPE_COUNTER: enum_CassBatchType_ = 2;
pub type enum_CassBatchType_ = ::std::os::raw::c_uint;
pub use self::enum_CassBatchType_ as CassBatchType;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_RESULT:
    enum_CassIteratorType_ = 0;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_ROW:
    enum_CassIteratorType_ = 1;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_COLLECTION:
    enum_CassIteratorType_ = 2;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_MAP:
    enum_CassIteratorType_ = 3;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_TUPLE:
    enum_CassIteratorType_ = 4;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_USER_TYPE_FIELD:
    enum_CassIteratorType_ = 5;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_META_FIELD:
    enum_CassIteratorType_ = 6;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_KEYSPACE_META:
    enum_CassIteratorType_ = 7;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_TABLE_META:
    enum_CassIteratorType_ = 8;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_TYPE_META:
    enum_CassIteratorType_ = 9;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_FUNCTION_META:
    enum_CassIteratorType_ = 10;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_AGGREGATE_META:
    enum_CassIteratorType_ = 11;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_COLUMN_META:
    enum_CassIteratorType_ = 12;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_INDEX_META:
    enum_CassIteratorType_ = 13;
pub const enum_CassIteratorType__CASS_ITERATOR_TYPE_MATERIALIZED_VIEW_META:
    enum_CassIteratorType_ = 14;
pub type enum_CassIteratorType_ = ::std::os::raw::c_uint;
pub use self::enum_CassIteratorType_ as CassIteratorType;
pub const enum_CassLogLevel__CASS_LOG_DISABLED: enum_CassLogLevel_ = 0;
pub const enum_CassLogLevel__CASS_LOG_CRITICAL: enum_CassLogLevel_ = 1;
pub const enum_CassLogLevel__CASS_LOG_ERROR: enum_CassLogLevel_ = 2;
pub const enum_CassLogLevel__CASS_LOG_WARN: enum_CassLogLevel_ = 3;
pub const enum_CassLogLevel__CASS_LOG_INFO: enum_CassLogLevel_ = 4;
pub const enum_CassLogLevel__CASS_LOG_DEBUG: enum_CassLogLevel_ = 5;
pub const enum_CassLogLevel__CASS_LOG_TRACE: enum_CassLogLevel_ = 6;
pub const enum_CassLogLevel__CASS_LOG_LAST_ENTRY: enum_CassLogLevel_ = 7;
pub type enum_CassLogLevel_ = ::std::os::raw::c_uint;
pub use self::enum_CassLogLevel_ as CassLogLevel;
pub const enum_CassSslVerifyFlags__CASS_SSL_VERIFY_NONE:
    enum_CassSslVerifyFlags_ = 0;
pub const enum_CassSslVerifyFlags__CASS_SSL_VERIFY_PEER_CERT:
    enum_CassSslVerifyFlags_ = 1;
pub const enum_CassSslVerifyFlags__CASS_SSL_VERIFY_PEER_IDENTITY:
    enum_CassSslVerifyFlags_ = 2;
pub const enum_CassSslVerifyFlags__CASS_SSL_VERIFY_PEER_IDENTITY_DNS:
    enum_CassSslVerifyFlags_ = 4;
pub type enum_CassSslVerifyFlags_ = ::std::os::raw::c_uint;
pub use self::enum_CassSslVerifyFlags_ as CassSslVerifyFlags;
pub const enum_CassSslTlsVersion__CASS_SSL_VERSION_TLS1:
    enum_CassSslTlsVersion_ = 0;
pub const enum_CassSslTlsVersion__CASS_SSL_VERSION_TLS1_1:
    enum_CassSslTlsVersion_ = 1;
pub const enum_CassSslTlsVersion__CASS_SSL_VERSION_TLS1_2:
    enum_CassSslTlsVersion_ = 2;
pub type enum_CassSslTlsVersion_ = ::std::os::raw::c_uint;
pub use self::enum_CassSslTlsVersion_ as CassSslTlsVersion;
pub const enum_CassProtocolVersion__CASS_PROTOCOL_VERSION_V1:
    enum_CassProtocolVersion_ = 1;
pub const enum_CassProtocolVersion__CASS_PROTOCOL_VERSION_V2:
    enum_CassProtocolVersion_ = 2;
pub const enum_CassProtocolVersion__CASS_PROTOCOL_VERSION_V3:
    enum_CassProtocolVersion_ = 3;
pub const enum_CassProtocolVersion__CASS_PROTOCOL_VERSION_V4:
    enum_CassProtocolVersion_ = 4;
pub const enum_CassProtocolVersion__CASS_PROTOCOL_VERSION_V5:
    enum_CassProtocolVersion_ = 5;
pub const enum_CassProtocolVersion__CASS_PROTOCOL_VERSION_DSEV1:
    enum_CassProtocolVersion_ = 65;
pub const enum_CassProtocolVersion__CASS_PROTOCOL_VERSION_DSEV2:
    enum_CassProtocolVersion_ = 66;
pub type enum_CassProtocolVersion_ = ::std::os::raw::c_uint;
pub use self::enum_CassProtocolVersion_ as CassProtocolVersion;
pub const enum_CassErrorSource__CASS_ERROR_SOURCE_NONE: enum_CassErrorSource_ =
    0;
pub const enum_CassErrorSource__CASS_ERROR_SOURCE_LIB: enum_CassErrorSource_ =
    1;
pub const enum_CassErrorSource__CASS_ERROR_SOURCE_SERVER:
    enum_CassErrorSource_ = 2;
pub const enum_CassErrorSource__CASS_ERROR_SOURCE_SSL: enum_CassErrorSource_ =
    3;
pub const enum_CassErrorSource__CASS_ERROR_SOURCE_COMPRESSION:
    enum_CassErrorSource_ = 4;
pub type enum_CassErrorSource_ = ::std::os::raw::c_uint;
pub use self::enum_CassErrorSource_ as CassErrorSource;
pub const enum_CassError__CASS_OK: enum_CassError_ = 0;
pub const enum_CassError__CASS_ERROR_LIB_BAD_PARAMS: enum_CassError_ = 16777217;
pub const enum_CassError__CASS_ERROR_LIB_NO_STREAMS: enum_CassError_ = 16777218;
pub const enum_CassError__CASS_ERROR_LIB_UNABLE_TO_INIT: enum_CassError_ =
    16777219;
pub const enum_CassError__CASS_ERROR_LIB_MESSAGE_ENCODE: enum_CassError_ =
    16777220;
pub const enum_CassError__CASS_ERROR_LIB_HOST_RESOLUTION: enum_CassError_ =
    16777221;
pub const enum_CassError__CASS_ERROR_LIB_UNEXPECTED_RESPONSE: enum_CassError_ =
    16777222;
pub const enum_CassError__CASS_ERROR_LIB_REQUEST_QUEUE_FULL: enum_CassError_ =
    16777223;
pub const enum_CassError__CASS_ERROR_LIB_NO_AVAILABLE_IO_THREAD:
    enum_CassError_ = 16777224;
pub const enum_CassError__CASS_ERROR_LIB_WRITE_ERROR: enum_CassError_ =
    16777225;
pub const enum_CassError__CASS_ERROR_LIB_NO_HOSTS_AVAILABLE: enum_CassError_ =
    16777226;
pub const enum_CassError__CASS_ERROR_LIB_INDEX_OUT_OF_BOUNDS: enum_CassError_ =
    16777227;
pub const enum_CassError__CASS_ERROR_LIB_INVALID_ITEM_COUNT: enum_CassError_ =
    16777228;
pub const enum_CassError__CASS_ERROR_LIB_INVALID_VALUE_TYPE: enum_CassError_ =
    16777229;
pub const enum_CassError__CASS_ERROR_LIB_REQUEST_TIMED_OUT: enum_CassError_ =
    16777230;
pub const enum_CassError__CASS_ERROR_LIB_UNABLE_TO_SET_KEYSPACE:
    enum_CassError_ = 16777231;
pub const enum_CassError__CASS_ERROR_LIB_CALLBACK_ALREADY_SET: enum_CassError_ =
    16777232;
pub const enum_CassError__CASS_ERROR_LIB_INVALID_STATEMENT_TYPE:
    enum_CassError_ = 16777233;
pub const enum_CassError__CASS_ERROR_LIB_NAME_DOES_NOT_EXIST: enum_CassError_ =
    16777234;
pub const enum_CassError__CASS_ERROR_LIB_UNABLE_TO_DETERMINE_PROTOCOL:
    enum_CassError_ = 16777235;
pub const enum_CassError__CASS_ERROR_LIB_NULL_VALUE: enum_CassError_ = 16777236;
pub const enum_CassError__CASS_ERROR_LIB_NOT_IMPLEMENTED: enum_CassError_ =
    16777237;
pub const enum_CassError__CASS_ERROR_LIB_UNABLE_TO_CONNECT: enum_CassError_ =
    16777238;
pub const enum_CassError__CASS_ERROR_LIB_UNABLE_TO_CLOSE: enum_CassError_ =
    16777239;
pub const enum_CassError__CASS_ERROR_LIB_NO_PAGING_STATE: enum_CassError_ =
    16777240;
pub const enum_CassError__CASS_ERROR_LIB_PARAMETER_UNSET: enum_CassError_ =
    16777241;
pub const enum_CassError__CASS_ERROR_LIB_INVALID_ERROR_RESULT_TYPE:
    enum_CassError_ = 16777242;
pub const enum_CassError__CASS_ERROR_LIB_INVALID_FUTURE_TYPE: enum_CassError_ =
    16777243;
pub const enum_CassError__CASS_ERROR_LIB_INTERNAL_ERROR: enum_CassError_ =
    16777244;
pub const enum_CassError__CASS_ERROR_LIB_INVALID_CUSTOM_TYPE: enum_CassError_ =
    16777245;
pub const enum_CassError__CASS_ERROR_LIB_INVALID_DATA: enum_CassError_ =
    16777246;
pub const enum_CassError__CASS_ERROR_LIB_NOT_ENOUGH_DATA: enum_CassError_ =
    16777247;
pub const enum_CassError__CASS_ERROR_LIB_INVALID_STATE: enum_CassError_ =
    16777248;
pub const enum_CassError__CASS_ERROR_LIB_NO_CUSTOM_PAYLOAD: enum_CassError_ =
    16777249;
pub const enum_CassError__CASS_ERROR_LIB_EXECUTION_PROFILE_INVALID:
    enum_CassError_ = 16777250;
pub const enum_CassError__CASS_ERROR_LIB_NO_TRACING_ID: enum_CassError_ =
    16777251;
pub const enum_CassError__CASS_ERROR_SERVER_SERVER_ERROR: enum_CassError_ =
    33554432;
pub const enum_CassError__CASS_ERROR_SERVER_PROTOCOL_ERROR: enum_CassError_ =
    33554442;
pub const enum_CassError__CASS_ERROR_SERVER_BAD_CREDENTIALS: enum_CassError_ =
    33554688;
pub const enum_CassError__CASS_ERROR_SERVER_UNAVAILABLE: enum_CassError_ =
    33558528;
pub const enum_CassError__CASS_ERROR_SERVER_OVERLOADED: enum_CassError_ =
    33558529;
pub const enum_CassError__CASS_ERROR_SERVER_IS_BOOTSTRAPPING: enum_CassError_ =
    33558530;
pub const enum_CassError__CASS_ERROR_SERVER_TRUNCATE_ERROR: enum_CassError_ =
    33558531;
pub const enum_CassError__CASS_ERROR_SERVER_WRITE_TIMEOUT: enum_CassError_ =
    33558784;
pub const enum_CassError__CASS_ERROR_SERVER_READ_TIMEOUT: enum_CassError_ =
    33559040;
pub const enum_CassError__CASS_ERROR_SERVER_READ_FAILURE: enum_CassError_ =
    33559296;
pub const enum_CassError__CASS_ERROR_SERVER_FUNCTION_FAILURE: enum_CassError_ =
    33559552;
pub const enum_CassError__CASS_ERROR_SERVER_WRITE_FAILURE: enum_CassError_ =
    33559808;
pub const enum_CassError__CASS_ERROR_SERVER_SYNTAX_ERROR: enum_CassError_ =
    33562624;
pub const enum_CassError__CASS_ERROR_SERVER_UNAUTHORIZED: enum_CassError_ =
    33562880;
pub const enum_CassError__CASS_ERROR_SERVER_INVALID_QUERY: enum_CassError_ =
    33563136;
pub const enum_CassError__CASS_ERROR_SERVER_CONFIG_ERROR: enum_CassError_ =
    33563392;
pub const enum_CassError__CASS_ERROR_SERVER_ALREADY_EXISTS: enum_CassError_ =
    33563648;
pub const enum_CassError__CASS_ERROR_SERVER_UNPREPARED: enum_CassError_ =
    33563904;
pub const enum_CassError__CASS_ERROR_SSL_INVALID_CERT: enum_CassError_ =
    50331649;
pub const enum_CassError__CASS_ERROR_SSL_INVALID_PRIVATE_KEY: enum_CassError_ =
    50331650;
pub const enum_CassError__CASS_ERROR_SSL_NO_PEER_CERT: enum_CassError_ =
    50331651;
pub const enum_CassError__CASS_ERROR_SSL_INVALID_PEER_CERT: enum_CassError_ =
    50331652;
pub const enum_CassError__CASS_ERROR_SSL_IDENTITY_MISMATCH: enum_CassError_ =
    50331653;
pub const enum_CassError__CASS_ERROR_SSL_PROTOCOL_ERROR: enum_CassError_ =
    50331654;
pub const enum_CassError__CASS_ERROR_SSL_CLOSED: enum_CassError_ = 50331655;
pub const enum_CassError__CASS_ERROR_LAST_ENTRY: enum_CassError_ = 50331656;
pub type enum_CassError_ = ::std::os::raw::c_uint;
pub use self::enum_CassError_ as CassError;
pub type CassFutureCallback = ::std::option::Option<
    unsafe extern "C" fn(
        future: *mut CassFuture,
        data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassLogMessage_ {
    pub time_ms: cass_uint64_t,
    pub severity: CassLogLevel,
    pub file: *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub function: *const ::std::os::raw::c_char,
    pub message: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_struct_CassLogMessage_() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassLogMessage_> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassLogMessage_>(),
        1064usize,
        concat!("Size of: ", stringify!(struct_CassLogMessage_))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassLogMessage_>(),
        8usize,
        concat!("Alignment of ", stringify!(struct_CassLogMessage_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassLogMessage_),
            "::",
            stringify!(time_ms)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).severity) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassLogMessage_),
            "::",
            stringify!(severity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassLogMessage_),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassLogMessage_),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassLogMessage_),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassLogMessage_),
            "::",
            stringify!(message)
        )
    );
}
pub type CassLogMessage = struct_CassLogMessage_;
pub type CassLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        message: *const CassLogMessage,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type CassMallocFunction = ::std::option::Option<
    unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void,
>;
pub type CassReallocFunction = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CassFreeFunction = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassAuthenticator_ {
    _unused: [u8; 0],
}
pub type CassAuthenticator = struct_CassAuthenticator_;
pub type CassAuthenticatorInitialCallback = ::std::option::Option<
    unsafe extern "C" fn(
        auth: *mut CassAuthenticator,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type CassAuthenticatorChallengeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        auth: *mut CassAuthenticator,
        data: *mut ::std::os::raw::c_void,
        token: *const ::std::os::raw::c_char,
        token_size: usize,
    ),
>;
pub type CassAuthenticatorSuccessCallback = ::std::option::Option<
    unsafe extern "C" fn(
        auth: *mut CassAuthenticator,
        data: *mut ::std::os::raw::c_void,
        token: *const ::std::os::raw::c_char,
        token_size: usize,
    ),
>;
pub type CassAuthenticatorCleanupCallback = ::std::option::Option<
    unsafe extern "C" fn(
        auth: *mut CassAuthenticator,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type CassAuthenticatorDataCleanupCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassAuthenticatorCallbacks_ {
    pub initial_callback: CassAuthenticatorInitialCallback,
    pub challenge_callback: CassAuthenticatorChallengeCallback,
    pub success_callback: CassAuthenticatorSuccessCallback,
    pub cleanup_callback: CassAuthenticatorCleanupCallback,
}
#[test]
fn bindgen_test_layout_struct_CassAuthenticatorCallbacks_() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CassAuthenticatorCallbacks_> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CassAuthenticatorCallbacks_>(),
        32usize,
        concat!("Size of: ", stringify!(struct_CassAuthenticatorCallbacks_))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CassAuthenticatorCallbacks_>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(struct_CassAuthenticatorCallbacks_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initial_callback) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassAuthenticatorCallbacks_),
            "::",
            stringify!(initial_callback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).challenge_callback) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassAuthenticatorCallbacks_),
            "::",
            stringify!(challenge_callback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).success_callback) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassAuthenticatorCallbacks_),
            "::",
            stringify!(success_callback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cleanup_callback) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CassAuthenticatorCallbacks_),
            "::",
            stringify!(cleanup_callback)
        )
    );
}
pub type CassAuthenticatorCallbacks = struct_CassAuthenticatorCallbacks_;
pub const enum_CassHostListenerEvent__CASS_HOST_LISTENER_EVENT_UP:
    enum_CassHostListenerEvent_ = 0;
pub const enum_CassHostListenerEvent__CASS_HOST_LISTENER_EVENT_DOWN:
    enum_CassHostListenerEvent_ = 1;
pub const enum_CassHostListenerEvent__CASS_HOST_LISTENER_EVENT_ADD:
    enum_CassHostListenerEvent_ = 2;
pub const enum_CassHostListenerEvent__CASS_HOST_LISTENER_EVENT_REMOVE:
    enum_CassHostListenerEvent_ = 3;
pub type enum_CassHostListenerEvent_ = ::std::os::raw::c_uint;
pub use self::enum_CassHostListenerEvent_ as CassHostListenerEvent;
pub type CassHostListenerCallback = ::std::option::Option<
    unsafe extern "C" fn(
        event: CassHostListenerEvent,
        address: CassInet,
        data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CassExecProfile_ {
    _unused: [u8; 0],
}
pub type CassExecProfile = struct_CassExecProfile_;
extern "C" {
    pub fn cass_execution_profile_new() -> *mut CassExecProfile;
}
extern "C" {
    pub fn cass_execution_profile_free(profile: *mut CassExecProfile);
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_request_timeout(
        profile: *mut CassExecProfile,
        timeout_ms: cass_uint64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_consistency(
        profile: *mut CassExecProfile,
        consistency: CassConsistency,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_serial_consistency(
        profile: *mut CassExecProfile,
        serial_consistency: CassConsistency,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_load_balance_round_robin(
        profile: *mut CassExecProfile,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_load_balance_dc_aware(
        profile: *mut CassExecProfile,
        local_dc: *const ::std::os::raw::c_char,
        used_hosts_per_remote_dc: ::std::os::raw::c_uint,
        allow_remote_dcs_for_local_cl: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_load_balance_dc_aware_n(
        profile: *mut CassExecProfile,
        local_dc: *const ::std::os::raw::c_char,
        local_dc_length: usize,
        used_hosts_per_remote_dc: ::std::os::raw::c_uint,
        allow_remote_dcs_for_local_cl: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_token_aware_routing(
        profile: *mut CassExecProfile,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_token_aware_routing_shuffle_replicas(
        profile: *mut CassExecProfile,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_latency_aware_routing(
        profile: *mut CassExecProfile,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_latency_aware_routing_settings(
        profile: *mut CassExecProfile,
        exclusion_threshold: cass_double_t,
        scale_ms: cass_uint64_t,
        retry_period_ms: cass_uint64_t,
        update_rate_ms: cass_uint64_t,
        min_measured: cass_uint64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_whitelist_filtering(
        profile: *mut CassExecProfile,
        hosts: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_whitelist_filtering_n(
        profile: *mut CassExecProfile,
        hosts: *const ::std::os::raw::c_char,
        hosts_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_blacklist_filtering(
        profile: *mut CassExecProfile,
        hosts: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_blacklist_filtering_n(
        profile: *mut CassExecProfile,
        hosts: *const ::std::os::raw::c_char,
        hosts_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_whitelist_dc_filtering(
        profile: *mut CassExecProfile,
        dcs: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_whitelist_dc_filtering_n(
        profile: *mut CassExecProfile,
        dcs: *const ::std::os::raw::c_char,
        dcs_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_blacklist_dc_filtering(
        profile: *mut CassExecProfile,
        dcs: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_blacklist_dc_filtering_n(
        profile: *mut CassExecProfile,
        dcs: *const ::std::os::raw::c_char,
        dcs_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_retry_policy(
        profile: *mut CassExecProfile,
        retry_policy: *mut CassRetryPolicy,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_constant_speculative_execution_policy(
        profile: *mut CassExecProfile,
        constant_delay_ms: cass_int64_t,
        max_speculative_executions: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_execution_profile_set_no_speculative_execution_policy(
        profile: *mut CassExecProfile,
    ) -> CassError;
}
extern "C" {
    pub fn cass_cluster_new() -> *mut CassCluster;
}
extern "C" {
    pub fn cass_cluster_free(cluster: *mut CassCluster);
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_contact_points(
        cluster: *mut CassCluster,
        contact_points: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_contact_points_n(
        cluster: *mut CassCluster,
        contact_points: *const ::std::os::raw::c_char,
        contact_points_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_port(
        cluster: *mut CassCluster,
        port: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_local_address(
        cluster: *mut CassCluster,
        name: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_local_address_n(
        cluster: *mut CassCluster,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_cluster_set_ssl(cluster: *mut CassCluster, ssl: *mut CassSsl);
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_authenticator_callbacks(
        cluster: *mut CassCluster,
        exchange_callbacks: *const CassAuthenticatorCallbacks,
        cleanup_callback: CassAuthenticatorDataCleanupCallback,
        data: *mut ::std::os::raw::c_void,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_protocol_version(
        cluster: *mut CassCluster,
        protocol_version: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_use_beta_protocol_version(
        cluster: *mut CassCluster,
        enable: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_consistency(
        cluster: *mut CassCluster,
        consistency: CassConsistency,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_serial_consistency(
        cluster: *mut CassCluster,
        consistency: CassConsistency,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_num_threads_io(
        cluster: *mut CassCluster,
        num_threads: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_queue_size_io(
        cluster: *mut CassCluster,
        queue_size: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_queue_size_event(
        cluster: *mut CassCluster,
        queue_size: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_core_connections_per_host(
        cluster: *mut CassCluster,
        num_connections: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_max_connections_per_host(
        cluster: *mut CassCluster,
        num_connections: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    pub fn cass_cluster_set_reconnect_wait_time(
        cluster: *mut CassCluster,
        wait_time: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_constant_reconnect(
        cluster: *mut CassCluster,
        delay_ms: cass_uint64_t,
    );
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_exponential_reconnect(
        cluster: *mut CassCluster,
        base_delay_ms: cass_uint64_t,
        max_delay_ms: cass_uint64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_coalesce_delay(
        cluster: *mut CassCluster,
        delay_us: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_new_request_ratio(
        cluster: *mut CassCluster,
        ratio: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_max_concurrent_creation(
        cluster: *mut CassCluster,
        num_connections: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_max_concurrent_requests_threshold(
        cluster: *mut CassCluster,
        num_requests: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_max_requests_per_flush(
        cluster: *mut CassCluster,
        num_requests: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_write_bytes_high_water_mark(
        cluster: *mut CassCluster,
        num_bytes: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_write_bytes_low_water_mark(
        cluster: *mut CassCluster,
        num_bytes: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_pending_requests_high_water_mark(
        cluster: *mut CassCluster,
        num_requests: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_pending_requests_low_water_mark(
        cluster: *mut CassCluster,
        num_requests: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    pub fn cass_cluster_set_connect_timeout(
        cluster: *mut CassCluster,
        timeout_ms: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_request_timeout(
        cluster: *mut CassCluster,
        timeout_ms: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_resolve_timeout(
        cluster: *mut CassCluster,
        timeout_ms: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_max_schema_wait_time(
        cluster: *mut CassCluster,
        wait_time_ms: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_tracing_max_wait_time(
        cluster: *mut CassCluster,
        max_wait_time_ms: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_tracing_retry_wait_time(
        cluster: *mut CassCluster,
        retry_wait_time_ms: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_tracing_consistency(
        cluster: *mut CassCluster,
        consistency: CassConsistency,
    );
}
extern "C" {
    pub fn cass_cluster_set_credentials(
        cluster: *mut CassCluster,
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_cluster_set_credentials_n(
        cluster: *mut CassCluster,
        username: *const ::std::os::raw::c_char,
        username_length: usize,
        password: *const ::std::os::raw::c_char,
        password_length: usize,
    );
}
extern "C" {
    pub fn cass_cluster_set_load_balance_round_robin(cluster: *mut CassCluster);
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_load_balance_dc_aware(
        cluster: *mut CassCluster,
        local_dc: *const ::std::os::raw::c_char,
        used_hosts_per_remote_dc: ::std::os::raw::c_uint,
        allow_remote_dcs_for_local_cl: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_load_balance_dc_aware_n(
        cluster: *mut CassCluster,
        local_dc: *const ::std::os::raw::c_char,
        local_dc_length: usize,
        used_hosts_per_remote_dc: ::std::os::raw::c_uint,
        allow_remote_dcs_for_local_cl: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    pub fn cass_cluster_set_token_aware_routing(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    );
}
extern "C" {
    pub fn cass_cluster_set_token_aware_routing_shuffle_replicas(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    );
}
extern "C" {
    pub fn cass_cluster_set_latency_aware_routing(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    );
}
extern "C" {
    pub fn cass_cluster_set_latency_aware_routing_settings(
        cluster: *mut CassCluster,
        exclusion_threshold: cass_double_t,
        scale_ms: cass_uint64_t,
        retry_period_ms: cass_uint64_t,
        update_rate_ms: cass_uint64_t,
        min_measured: cass_uint64_t,
    );
}
extern "C" {
    pub fn cass_cluster_set_whitelist_filtering(
        cluster: *mut CassCluster,
        hosts: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_cluster_set_whitelist_filtering_n(
        cluster: *mut CassCluster,
        hosts: *const ::std::os::raw::c_char,
        hosts_length: usize,
    );
}
extern "C" {
    pub fn cass_cluster_set_blacklist_filtering(
        cluster: *mut CassCluster,
        hosts: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_cluster_set_blacklist_filtering_n(
        cluster: *mut CassCluster,
        hosts: *const ::std::os::raw::c_char,
        hosts_length: usize,
    );
}
extern "C" {
    pub fn cass_cluster_set_whitelist_dc_filtering(
        cluster: *mut CassCluster,
        dcs: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_cluster_set_whitelist_dc_filtering_n(
        cluster: *mut CassCluster,
        dcs: *const ::std::os::raw::c_char,
        dcs_length: usize,
    );
}
extern "C" {
    pub fn cass_cluster_set_blacklist_dc_filtering(
        cluster: *mut CassCluster,
        dcs: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_cluster_set_blacklist_dc_filtering_n(
        cluster: *mut CassCluster,
        dcs: *const ::std::os::raw::c_char,
        dcs_length: usize,
    );
}
extern "C" {
    pub fn cass_cluster_set_tcp_nodelay(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    );
}
extern "C" {
    pub fn cass_cluster_set_tcp_keepalive(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
        delay_secs: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_timestamp_gen(
        cluster: *mut CassCluster,
        timestamp_gen: *mut CassTimestampGen,
    );
}
extern "C" {
    pub fn cass_cluster_set_connection_heartbeat_interval(
        cluster: *mut CassCluster,
        interval_secs: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_connection_idle_timeout(
        cluster: *mut CassCluster,
        timeout_secs: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cass_cluster_set_retry_policy(
        cluster: *mut CassCluster,
        retry_policy: *mut CassRetryPolicy,
    );
}
extern "C" {
    pub fn cass_cluster_set_use_schema(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    );
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_use_hostname_resolution(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_use_randomized_contact_points(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_constant_speculative_execution_policy(
        cluster: *mut CassCluster,
        constant_delay_ms: cass_int64_t,
        max_speculative_executions: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_no_speculative_execution_policy(
        cluster: *mut CassCluster,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_max_reusable_write_objects(
        cluster: *mut CassCluster,
        num_objects: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_execution_profile(
        cluster: *mut CassCluster,
        name: *const ::std::os::raw::c_char,
        profile: *mut CassExecProfile,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_execution_profile_n(
        cluster: *mut CassCluster,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        profile: *mut CassExecProfile,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_prepare_on_all_hosts(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_prepare_on_up_or_add_host(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_no_compact(
        cluster: *mut CassCluster,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_host_listener_callback(
        cluster: *mut CassCluster,
        callback: CassHostListenerCallback,
        data: *mut ::std::os::raw::c_void,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_cloud_secure_connection_bundle(
        cluster: *mut CassCluster,
        path: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_cloud_secure_connection_bundle_n(
        cluster: *mut CassCluster,
        path: *const ::std::os::raw::c_char,
        path_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_cloud_secure_connection_bundle_no_ssl_lib_init(
        cluster: *mut CassCluster,
        path: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_cloud_secure_connection_bundle_no_ssl_lib_init_n(
        cluster: *mut CassCluster,
        path: *const ::std::os::raw::c_char,
        path_length: usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_cluster_set_application_name(
        cluster: *mut CassCluster,
        application_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_cluster_set_application_name_n(
        cluster: *mut CassCluster,
        application_name: *const ::std::os::raw::c_char,
        application_name_length: usize,
    );
}
extern "C" {
    pub fn cass_cluster_set_application_version(
        cluster: *mut CassCluster,
        application_version: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_cluster_set_application_version_n(
        cluster: *mut CassCluster,
        application_version: *const ::std::os::raw::c_char,
        application_version_length: usize,
    );
}
extern "C" {
    pub fn cass_cluster_set_client_id(
        cluster: *mut CassCluster,
        client_id: CassUuid,
    );
}
extern "C" {
    pub fn cass_cluster_set_monitor_reporting_interval(
        cluster: *mut CassCluster,
        interval_secs: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[must_use]
    pub fn cass_cluster_set_histogram_refresh_interval(
        cluster: *mut CassCluster,
        refresh_interval: ::std::os::raw::c_uint,
    ) -> CassError;
}
extern "C" {
    pub fn cass_session_new() -> *mut CassSession;
}
extern "C" {
    pub fn cass_session_free(session: *mut CassSession);
}
extern "C" {
    pub fn cass_session_connect(
        session: *mut CassSession,
        cluster: *const CassCluster,
    ) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_connect_keyspace(
        session: *mut CassSession,
        cluster: *const CassCluster,
        keyspace: *const ::std::os::raw::c_char,
    ) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_connect_keyspace_n(
        session: *mut CassSession,
        cluster: *const CassCluster,
        keyspace: *const ::std::os::raw::c_char,
        keyspace_length: usize,
    ) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_close(session: *mut CassSession) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_prepare(
        session: *mut CassSession,
        query: *const ::std::os::raw::c_char,
    ) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_prepare_n(
        session: *mut CassSession,
        query: *const ::std::os::raw::c_char,
        query_length: usize,
    ) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_prepare_from_existing(
        session: *mut CassSession,
        statement: *mut CassStatement,
    ) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_execute(
        session: *mut CassSession,
        statement: *const CassStatement,
    ) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_execute_batch(
        session: *mut CassSession,
        batch: *const CassBatch,
    ) -> *mut CassFuture;
}
extern "C" {
    pub fn cass_session_get_schema_meta(
        session: *const CassSession,
    ) -> *const CassSchemaMeta;
}
extern "C" {
    pub fn cass_session_get_metrics(
        session: *const CassSession,
        output: *mut CassMetrics,
    );
}
extern "C" {
    pub fn cass_session_get_speculative_execution_metrics(
        session: *const CassSession,
        output: *mut CassSpeculativeExecutionMetrics,
    );
}
extern "C" {
    pub fn cass_session_get_client_id(session: *mut CassSession) -> CassUuid;
}
extern "C" {
    pub fn cass_schema_meta_free(schema_meta: *const CassSchemaMeta);
}
extern "C" {
    pub fn cass_schema_meta_snapshot_version(
        schema_meta: *const CassSchemaMeta,
    ) -> cass_uint32_t;
}
extern "C" {
    pub fn cass_schema_meta_version(
        schema_meta: *const CassSchemaMeta,
    ) -> CassVersion;
}
extern "C" {
    pub fn cass_schema_meta_keyspace_by_name(
        schema_meta: *const CassSchemaMeta,
        keyspace: *const ::std::os::raw::c_char,
    ) -> *const CassKeyspaceMeta;
}
extern "C" {
    pub fn cass_schema_meta_keyspace_by_name_n(
        schema_meta: *const CassSchemaMeta,
        keyspace: *const ::std::os::raw::c_char,
        keyspace_length: usize,
    ) -> *const CassKeyspaceMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_name(
        keyspace_meta: *const CassKeyspaceMeta,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_keyspace_meta_is_virtual(
        keyspace_meta: *const CassKeyspaceMeta,
    ) -> cass_bool_t;
}
extern "C" {
    pub fn cass_keyspace_meta_table_by_name(
        keyspace_meta: *const CassKeyspaceMeta,
        table: *const ::std::os::raw::c_char,
    ) -> *const CassTableMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_table_by_name_n(
        keyspace_meta: *const CassKeyspaceMeta,
        table: *const ::std::os::raw::c_char,
        table_length: usize,
    ) -> *const CassTableMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_materialized_view_by_name(
        keyspace_meta: *const CassKeyspaceMeta,
        view: *const ::std::os::raw::c_char,
    ) -> *const CassMaterializedViewMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_materialized_view_by_name_n(
        keyspace_meta: *const CassKeyspaceMeta,
        view: *const ::std::os::raw::c_char,
        view_length: usize,
    ) -> *const CassMaterializedViewMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_user_type_by_name(
        keyspace_meta: *const CassKeyspaceMeta,
        type_: *const ::std::os::raw::c_char,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_keyspace_meta_user_type_by_name_n(
        keyspace_meta: *const CassKeyspaceMeta,
        type_: *const ::std::os::raw::c_char,
        type_length: usize,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_keyspace_meta_function_by_name(
        keyspace_meta: *const CassKeyspaceMeta,
        name: *const ::std::os::raw::c_char,
        arguments: *const ::std::os::raw::c_char,
    ) -> *const CassFunctionMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_function_by_name_n(
        keyspace_meta: *const CassKeyspaceMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        arguments: *const ::std::os::raw::c_char,
        arguments_length: usize,
    ) -> *const CassFunctionMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_aggregate_by_name(
        keyspace_meta: *const CassKeyspaceMeta,
        name: *const ::std::os::raw::c_char,
        arguments: *const ::std::os::raw::c_char,
    ) -> *const CassAggregateMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_aggregate_by_name_n(
        keyspace_meta: *const CassKeyspaceMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        arguments: *const ::std::os::raw::c_char,
        arguments_length: usize,
    ) -> *const CassAggregateMeta;
}
extern "C" {
    pub fn cass_keyspace_meta_field_by_name(
        keyspace_meta: *const CassKeyspaceMeta,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_keyspace_meta_field_by_name_n(
        keyspace_meta: *const CassKeyspaceMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_table_meta_name(
        table_meta: *const CassTableMeta,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_table_meta_is_virtual(
        table_meta: *const CassTableMeta,
    ) -> cass_bool_t;
}
extern "C" {
    pub fn cass_table_meta_column_by_name(
        table_meta: *const CassTableMeta,
        column: *const ::std::os::raw::c_char,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_table_meta_column_by_name_n(
        table_meta: *const CassTableMeta,
        column: *const ::std::os::raw::c_char,
        column_length: usize,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_table_meta_column_count(
        table_meta: *const CassTableMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_table_meta_column(
        table_meta: *const CassTableMeta,
        index: usize,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_table_meta_index_by_name(
        table_meta: *const CassTableMeta,
        index: *const ::std::os::raw::c_char,
    ) -> *const CassIndexMeta;
}
extern "C" {
    pub fn cass_table_meta_index_by_name_n(
        table_meta: *const CassTableMeta,
        index: *const ::std::os::raw::c_char,
        index_length: usize,
    ) -> *const CassIndexMeta;
}
extern "C" {
    pub fn cass_table_meta_index_count(
        table_meta: *const CassTableMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_table_meta_index(
        table_meta: *const CassTableMeta,
        index: usize,
    ) -> *const CassIndexMeta;
}
extern "C" {
    pub fn cass_table_meta_materialized_view_by_name(
        table_meta: *const CassTableMeta,
        view: *const ::std::os::raw::c_char,
    ) -> *const CassMaterializedViewMeta;
}
extern "C" {
    pub fn cass_table_meta_materialized_view_by_name_n(
        table_meta: *const CassTableMeta,
        view: *const ::std::os::raw::c_char,
        view_length: usize,
    ) -> *const CassMaterializedViewMeta;
}
extern "C" {
    pub fn cass_table_meta_materialized_view_count(
        table_meta: *const CassTableMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_table_meta_materialized_view(
        table_meta: *const CassTableMeta,
        index: usize,
    ) -> *const CassMaterializedViewMeta;
}
extern "C" {
    pub fn cass_table_meta_partition_key_count(
        table_meta: *const CassTableMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_table_meta_partition_key(
        table_meta: *const CassTableMeta,
        index: usize,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_table_meta_clustering_key_count(
        table_meta: *const CassTableMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_table_meta_clustering_key(
        table_meta: *const CassTableMeta,
        index: usize,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_table_meta_clustering_key_order(
        table_meta: *const CassTableMeta,
        index: usize,
    ) -> CassClusteringOrder;
}
extern "C" {
    pub fn cass_table_meta_field_by_name(
        table_meta: *const CassTableMeta,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_table_meta_field_by_name_n(
        table_meta: *const CassTableMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_materialized_view_meta_column_by_name(
        view_meta: *const CassMaterializedViewMeta,
        column: *const ::std::os::raw::c_char,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_materialized_view_meta_column_by_name_n(
        view_meta: *const CassMaterializedViewMeta,
        column: *const ::std::os::raw::c_char,
        column_length: usize,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_materialized_view_meta_name(
        view_meta: *const CassMaterializedViewMeta,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_materialized_view_meta_base_table(
        view_meta: *const CassMaterializedViewMeta,
    ) -> *const CassTableMeta;
}
extern "C" {
    pub fn cass_materialized_view_meta_column_count(
        view_meta: *const CassMaterializedViewMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_materialized_view_meta_column(
        view_meta: *const CassMaterializedViewMeta,
        index: usize,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_materialized_view_meta_partition_key_count(
        view_meta: *const CassMaterializedViewMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_materialized_view_meta_partition_key(
        view_meta: *const CassMaterializedViewMeta,
        index: usize,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_materialized_view_meta_clustering_key_count(
        view_meta: *const CassMaterializedViewMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_materialized_view_meta_clustering_key(
        view_meta: *const CassMaterializedViewMeta,
        index: usize,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_materialized_view_meta_clustering_key_order(
        view_meta: *const CassMaterializedViewMeta,
        index: usize,
    ) -> CassClusteringOrder;
}
extern "C" {
    pub fn cass_materialized_view_meta_field_by_name(
        view_meta: *const CassMaterializedViewMeta,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_materialized_view_meta_field_by_name_n(
        view_meta: *const CassMaterializedViewMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_column_meta_name(
        column_meta: *const CassColumnMeta,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_column_meta_type(
        column_meta: *const CassColumnMeta,
    ) -> CassColumnType;
}
extern "C" {
    pub fn cass_column_meta_data_type(
        column_meta: *const CassColumnMeta,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_column_meta_field_by_name(
        column_meta: *const CassColumnMeta,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_column_meta_field_by_name_n(
        column_meta: *const CassColumnMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_index_meta_name(
        index_meta: *const CassIndexMeta,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_index_meta_type(
        index_meta: *const CassIndexMeta,
    ) -> CassIndexType;
}
extern "C" {
    pub fn cass_index_meta_target(
        index_meta: *const CassIndexMeta,
        target: *mut *const ::std::os::raw::c_char,
        target_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_index_meta_options(
        index_meta: *const CassIndexMeta,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_index_meta_field_by_name(
        index_meta: *const CassIndexMeta,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_index_meta_field_by_name_n(
        index_meta: *const CassIndexMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_function_meta_name(
        function_meta: *const CassFunctionMeta,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_function_meta_full_name(
        function_meta: *const CassFunctionMeta,
        full_name: *mut *const ::std::os::raw::c_char,
        full_name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_function_meta_body(
        function_meta: *const CassFunctionMeta,
        body: *mut *const ::std::os::raw::c_char,
        body_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_function_meta_language(
        function_meta: *const CassFunctionMeta,
        language: *mut *const ::std::os::raw::c_char,
        language_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_function_meta_called_on_null_input(
        function_meta: *const CassFunctionMeta,
    ) -> cass_bool_t;
}
extern "C" {
    pub fn cass_function_meta_argument_count(
        function_meta: *const CassFunctionMeta,
    ) -> usize;
}
extern "C" {
    #[must_use]
    pub fn cass_function_meta_argument(
        function_meta: *const CassFunctionMeta,
        index: usize,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
        type_: *mut *const CassDataType,
    ) -> CassError;
}
extern "C" {
    pub fn cass_function_meta_argument_type_by_name(
        function_meta: *const CassFunctionMeta,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_function_meta_argument_type_by_name_n(
        function_meta: *const CassFunctionMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_function_meta_return_type(
        function_meta: *const CassFunctionMeta,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_function_meta_field_by_name(
        function_meta: *const CassFunctionMeta,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_function_meta_field_by_name_n(
        function_meta: *const CassFunctionMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_aggregate_meta_name(
        aggregate_meta: *const CassAggregateMeta,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_aggregate_meta_full_name(
        aggregate_meta: *const CassAggregateMeta,
        full_name: *mut *const ::std::os::raw::c_char,
        full_name_length: *mut usize,
    );
}
extern "C" {
    pub fn cass_aggregate_meta_argument_count(
        aggregate_meta: *const CassAggregateMeta,
    ) -> usize;
}
extern "C" {
    pub fn cass_aggregate_meta_argument_type(
        aggregate_meta: *const CassAggregateMeta,
        index: usize,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_aggregate_meta_return_type(
        aggregate_meta: *const CassAggregateMeta,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_aggregate_meta_state_type(
        aggregate_meta: *const CassAggregateMeta,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_aggregate_meta_state_func(
        aggregate_meta: *const CassAggregateMeta,
    ) -> *const CassFunctionMeta;
}
extern "C" {
    pub fn cass_aggregate_meta_final_func(
        aggregate_meta: *const CassAggregateMeta,
    ) -> *const CassFunctionMeta;
}
extern "C" {
    pub fn cass_aggregate_meta_init_cond(
        aggregate_meta: *const CassAggregateMeta,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_aggregate_meta_field_by_name(
        aggregate_meta: *const CassAggregateMeta,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_aggregate_meta_field_by_name_n(
        aggregate_meta: *const CassAggregateMeta,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_ssl_new() -> *mut CassSsl;
}
extern "C" {
    pub fn cass_ssl_new_no_lib_init() -> *mut CassSsl;
}
extern "C" {
    pub fn cass_ssl_free(ssl: *mut CassSsl);
}
extern "C" {
    #[must_use]
    pub fn cass_ssl_add_trusted_cert(
        ssl: *mut CassSsl,
        cert: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_ssl_add_trusted_cert_n(
        ssl: *mut CassSsl,
        cert: *const ::std::os::raw::c_char,
        cert_length: usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_ssl_set_verify_flags(
        ssl: *mut CassSsl,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[must_use]
    pub fn cass_ssl_set_cert(
        ssl: *mut CassSsl,
        cert: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_ssl_set_cert_n(
        ssl: *mut CassSsl,
        cert: *const ::std::os::raw::c_char,
        cert_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_ssl_set_private_key(
        ssl: *mut CassSsl,
        key: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_ssl_set_private_key_n(
        ssl: *mut CassSsl,
        key: *const ::std::os::raw::c_char,
        key_length: usize,
        password: *const ::std::os::raw::c_char,
        password_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_ssl_set_min_protocol_version(
        ssl: *mut CassSsl,
        min_version: CassSslTlsVersion,
    ) -> CassError;
}
extern "C" {
    pub fn cass_authenticator_address(
        auth: *const CassAuthenticator,
        address: *mut CassInet,
    );
}
extern "C" {
    pub fn cass_authenticator_hostname(
        auth: *const CassAuthenticator,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cass_authenticator_class_name(
        auth: *const CassAuthenticator,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cass_authenticator_exchange_data(
        auth: *mut CassAuthenticator,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cass_authenticator_set_exchange_data(
        auth: *mut CassAuthenticator,
        exchange_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn cass_authenticator_response(
        auth: *mut CassAuthenticator,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cass_authenticator_set_response(
        auth: *mut CassAuthenticator,
        response: *const ::std::os::raw::c_char,
        response_size: usize,
    );
}
extern "C" {
    pub fn cass_authenticator_set_error(
        auth: *mut CassAuthenticator,
        message: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_authenticator_set_error_n(
        auth: *mut CassAuthenticator,
        message: *const ::std::os::raw::c_char,
        message_length: usize,
    );
}
extern "C" {
    pub fn cass_future_free(future: *mut CassFuture);
}
extern "C" {
    #[must_use]
    pub fn cass_future_set_callback(
        future: *mut CassFuture,
        callback: CassFutureCallback,
        data: *mut ::std::os::raw::c_void,
    ) -> CassError;
}
extern "C" {
    pub fn cass_future_ready(future: *mut CassFuture) -> cass_bool_t;
}
extern "C" {
    pub fn cass_future_wait(future: *mut CassFuture);
}
extern "C" {
    pub fn cass_future_wait_timed(
        future: *mut CassFuture,
        timeout_us: cass_duration_t,
    ) -> cass_bool_t;
}
extern "C" {
    pub fn cass_future_get_result(future: *mut CassFuture)
        -> *const CassResult;
}
extern "C" {
    pub fn cass_future_get_error_result(
        future: *mut CassFuture,
    ) -> *const CassErrorResult;
}
extern "C" {
    pub fn cass_future_get_prepared(
        future: *mut CassFuture,
    ) -> *const CassPrepared;
}
extern "C" {
    #[must_use]
    pub fn cass_future_error_code(future: *mut CassFuture) -> CassError;
}
extern "C" {
    pub fn cass_future_error_message(
        future: *mut CassFuture,
        message: *mut *const ::std::os::raw::c_char,
        message_length: *mut usize,
    );
}
extern "C" {
    #[must_use]
    pub fn cass_future_tracing_id(
        future: *mut CassFuture,
        tracing_id: *mut CassUuid,
    ) -> CassError;
}
extern "C" {
    pub fn cass_future_custom_payload_item_count(
        future: *mut CassFuture,
    ) -> usize;
}
extern "C" {
    #[must_use]
    pub fn cass_future_custom_payload_item(
        future: *mut CassFuture,
        index: usize,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
        value: *mut *const cass_byte_t,
        value_size: *mut usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_future_coordinator(future: *mut CassFuture) -> *const CassNode;
}
extern "C" {
    pub fn cass_statement_new(
        query: *const ::std::os::raw::c_char,
        parameter_count: usize,
    ) -> *mut CassStatement;
}
extern "C" {
    pub fn cass_statement_new_n(
        query: *const ::std::os::raw::c_char,
        query_length: usize,
        parameter_count: usize,
    ) -> *mut CassStatement;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_reset_parameters(
        statement: *mut CassStatement,
        count: usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_statement_free(statement: *mut CassStatement);
}
extern "C" {
    #[must_use]
    pub fn cass_statement_add_key_index(
        statement: *mut CassStatement,
        index: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_keyspace(
        statement: *mut CassStatement,
        keyspace: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_keyspace_n(
        statement: *mut CassStatement,
        keyspace: *const ::std::os::raw::c_char,
        keyspace_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_consistency(
        statement: *mut CassStatement,
        consistency: CassConsistency,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_serial_consistency(
        statement: *mut CassStatement,
        serial_consistency: CassConsistency,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_paging_size(
        statement: *mut CassStatement,
        page_size: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_paging_state(
        statement: *mut CassStatement,
        result: *const CassResult,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_paging_state_token(
        statement: *mut CassStatement,
        paging_state: *const ::std::os::raw::c_char,
        paging_state_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_timestamp(
        statement: *mut CassStatement,
        timestamp: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_request_timeout(
        statement: *mut CassStatement,
        timeout_ms: cass_uint64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_is_idempotent(
        statement: *mut CassStatement,
        is_idempotent: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_retry_policy(
        statement: *mut CassStatement,
        retry_policy: *mut CassRetryPolicy,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_custom_payload(
        statement: *mut CassStatement,
        payload: *const CassCustomPayload,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_execution_profile(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_execution_profile_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_tracing(
        statement: *mut CassStatement,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_host(
        statement: *mut CassStatement,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_host_n(
        statement: *mut CassStatement,
        host: *const ::std::os::raw::c_char,
        host_length: usize,
        port: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_host_inet(
        statement: *mut CassStatement,
        host: *const CassInet,
        port: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_set_node(
        statement: *mut CassStatement,
        node: *const CassNode,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_null(
        statement: *mut CassStatement,
        index: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_null_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_null_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int8(
        statement: *mut CassStatement,
        index: usize,
        value: cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int8_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int8_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int16(
        statement: *mut CassStatement,
        index: usize,
        value: cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int16_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int16_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int32(
        statement: *mut CassStatement,
        index: usize,
        value: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int32_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int32_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_uint32(
        statement: *mut CassStatement,
        index: usize,
        value: cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_uint32_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_uint32_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int64(
        statement: *mut CassStatement,
        index: usize,
        value: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int64_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_int64_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_float(
        statement: *mut CassStatement,
        index: usize,
        value: cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_float_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_float_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_double(
        statement: *mut CassStatement,
        index: usize,
        value: cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_double_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_double_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_bool(
        statement: *mut CassStatement,
        index: usize,
        value: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_bool_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_bool_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_string(
        statement: *mut CassStatement,
        index: usize,
        value: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_string_n(
        statement: *mut CassStatement,
        index: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_string_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_string_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_bytes(
        statement: *mut CassStatement,
        index: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_bytes_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_bytes_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_custom(
        statement: *mut CassStatement,
        index: usize,
        class_name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_custom_n(
        statement: *mut CassStatement,
        index: usize,
        class_name: *const ::std::os::raw::c_char,
        class_name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_custom_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        class_name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_custom_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        class_name: *const ::std::os::raw::c_char,
        class_name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_uuid(
        statement: *mut CassStatement,
        index: usize,
        value: CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_uuid_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_uuid_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_inet(
        statement: *mut CassStatement,
        index: usize,
        value: CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_inet_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        value: CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_inet_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_decimal(
        statement: *mut CassStatement,
        index: usize,
        varint: *const cass_byte_t,
        varint_size: usize,
        scale: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_decimal_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        varint: *const cass_byte_t,
        varint_size: usize,
        scale: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_decimal_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        varint: *const cass_byte_t,
        varint_size: usize,
        scale: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_duration(
        statement: *mut CassStatement,
        index: usize,
        months: cass_int32_t,
        days: cass_int32_t,
        nanos: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_duration_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        months: cass_int32_t,
        days: cass_int32_t,
        nanos: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_duration_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        months: cass_int32_t,
        days: cass_int32_t,
        nanos: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_collection(
        statement: *mut CassStatement,
        index: usize,
        collection: *const CassCollection,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_collection_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        collection: *const CassCollection,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_collection_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        collection: *const CassCollection,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_tuple(
        statement: *mut CassStatement,
        index: usize,
        tuple: *const CassTuple,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_tuple_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        tuple: *const CassTuple,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_tuple_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        tuple: *const CassTuple,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_user_type(
        statement: *mut CassStatement,
        index: usize,
        user_type: *const CassUserType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_user_type_by_name(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        user_type: *const CassUserType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_statement_bind_user_type_by_name_n(
        statement: *mut CassStatement,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        user_type: *const CassUserType,
    ) -> CassError;
}
extern "C" {
    pub fn cass_prepared_free(prepared: *const CassPrepared);
}
extern "C" {
    pub fn cass_prepared_bind(
        prepared: *const CassPrepared,
    ) -> *mut CassStatement;
}
extern "C" {
    #[must_use]
    pub fn cass_prepared_parameter_name(
        prepared: *const CassPrepared,
        index: usize,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_prepared_parameter_data_type(
        prepared: *const CassPrepared,
        index: usize,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_prepared_parameter_data_type_by_name(
        prepared: *const CassPrepared,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_prepared_parameter_data_type_by_name_n(
        prepared: *const CassPrepared,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_batch_new(type_: CassBatchType) -> *mut CassBatch;
}
extern "C" {
    pub fn cass_batch_free(batch: *mut CassBatch);
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_keyspace(
        batch: *mut CassBatch,
        keyspace: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_keyspace_n(
        batch: *mut CassBatch,
        keyspace: *const ::std::os::raw::c_char,
        keyspace_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_consistency(
        batch: *mut CassBatch,
        consistency: CassConsistency,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_serial_consistency(
        batch: *mut CassBatch,
        serial_consistency: CassConsistency,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_timestamp(
        batch: *mut CassBatch,
        timestamp: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_request_timeout(
        batch: *mut CassBatch,
        timeout_ms: cass_uint64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_is_idempotent(
        batch: *mut CassBatch,
        is_idempotent: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_retry_policy(
        batch: *mut CassBatch,
        retry_policy: *mut CassRetryPolicy,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_custom_payload(
        batch: *mut CassBatch,
        payload: *const CassCustomPayload,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_tracing(
        batch: *mut CassBatch,
        enabled: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_add_statement(
        batch: *mut CassBatch,
        statement: *mut CassStatement,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_execution_profile(
        batch: *mut CassBatch,
        name: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_batch_set_execution_profile_n(
        batch: *mut CassBatch,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_data_type_new(type_: CassValueType) -> *mut CassDataType;
}
extern "C" {
    pub fn cass_data_type_new_from_existing(
        data_type: *const CassDataType,
    ) -> *mut CassDataType;
}
extern "C" {
    pub fn cass_data_type_new_tuple(item_count: usize) -> *mut CassDataType;
}
extern "C" {
    pub fn cass_data_type_new_udt(field_count: usize) -> *mut CassDataType;
}
extern "C" {
    pub fn cass_data_type_free(data_type: *mut CassDataType);
}
extern "C" {
    pub fn cass_data_type_type(data_type: *const CassDataType)
        -> CassValueType;
}
extern "C" {
    pub fn cass_data_type_is_frozen(
        data_type: *const CassDataType,
    ) -> cass_bool_t;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_type_name(
        data_type: *const CassDataType,
        type_name: *mut *const ::std::os::raw::c_char,
        type_name_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_set_type_name(
        data_type: *mut CassDataType,
        type_name: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_set_type_name_n(
        data_type: *mut CassDataType,
        type_name: *const ::std::os::raw::c_char,
        type_name_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_keyspace(
        data_type: *const CassDataType,
        keyspace: *mut *const ::std::os::raw::c_char,
        keyspace_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_set_keyspace(
        data_type: *mut CassDataType,
        keyspace: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_set_keyspace_n(
        data_type: *mut CassDataType,
        keyspace: *const ::std::os::raw::c_char,
        keyspace_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_class_name(
        data_type: *const CassDataType,
        class_name: *mut *const ::std::os::raw::c_char,
        class_name_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_set_class_name(
        data_type: *mut CassDataType,
        class_name: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_set_class_name_n(
        data_type: *mut CassDataType,
        class_name: *const ::std::os::raw::c_char,
        class_name_length: usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_data_type_sub_type_count(
        data_type: *const CassDataType,
    ) -> usize;
}
extern "C" {
    pub fn cass_data_sub_type_count(data_type: *const CassDataType) -> usize;
}
extern "C" {
    pub fn cass_data_type_sub_data_type(
        data_type: *const CassDataType,
        index: usize,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_data_type_sub_data_type_by_name(
        data_type: *const CassDataType,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_data_type_sub_data_type_by_name_n(
        data_type: *const CassDataType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassDataType;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_sub_type_name(
        data_type: *const CassDataType,
        index: usize,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_add_sub_type(
        data_type: *mut CassDataType,
        sub_data_type: *const CassDataType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_add_sub_type_by_name(
        data_type: *mut CassDataType,
        name: *const ::std::os::raw::c_char,
        sub_data_type: *const CassDataType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_add_sub_type_by_name_n(
        data_type: *mut CassDataType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        sub_data_type: *const CassDataType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_add_sub_value_type(
        data_type: *mut CassDataType,
        sub_value_type: CassValueType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_add_sub_value_type_by_name(
        data_type: *mut CassDataType,
        name: *const ::std::os::raw::c_char,
        sub_value_type: CassValueType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_data_type_add_sub_value_type_by_name_n(
        data_type: *mut CassDataType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        sub_value_type: CassValueType,
    ) -> CassError;
}
extern "C" {
    pub fn cass_collection_new(
        type_: CassCollectionType,
        item_count: usize,
    ) -> *mut CassCollection;
}
extern "C" {
    pub fn cass_collection_new_from_data_type(
        data_type: *const CassDataType,
        item_count: usize,
    ) -> *mut CassCollection;
}
extern "C" {
    pub fn cass_collection_free(collection: *mut CassCollection);
}
extern "C" {
    pub fn cass_collection_data_type(
        collection: *const CassCollection,
    ) -> *const CassDataType;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_int8(
        collection: *mut CassCollection,
        value: cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_int16(
        collection: *mut CassCollection,
        value: cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_int32(
        collection: *mut CassCollection,
        value: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_uint32(
        collection: *mut CassCollection,
        value: cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_int64(
        collection: *mut CassCollection,
        value: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_float(
        collection: *mut CassCollection,
        value: cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_double(
        collection: *mut CassCollection,
        value: cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_bool(
        collection: *mut CassCollection,
        value: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_string(
        collection: *mut CassCollection,
        value: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_string_n(
        collection: *mut CassCollection,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_bytes(
        collection: *mut CassCollection,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_custom(
        collection: *mut CassCollection,
        class_name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_custom_n(
        collection: *mut CassCollection,
        class_name: *const ::std::os::raw::c_char,
        class_name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_uuid(
        collection: *mut CassCollection,
        value: CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_inet(
        collection: *mut CassCollection,
        value: CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_decimal(
        collection: *mut CassCollection,
        varint: *const cass_byte_t,
        varint_size: usize,
        scale: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_duration(
        collection: *mut CassCollection,
        months: cass_int32_t,
        days: cass_int32_t,
        nanos: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_collection(
        collection: *mut CassCollection,
        value: *const CassCollection,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_tuple(
        collection: *mut CassCollection,
        value: *const CassTuple,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_collection_append_user_type(
        collection: *mut CassCollection,
        value: *const CassUserType,
    ) -> CassError;
}
extern "C" {
    pub fn cass_tuple_new(item_count: usize) -> *mut CassTuple;
}
extern "C" {
    pub fn cass_tuple_new_from_data_type(
        data_type: *const CassDataType,
    ) -> *mut CassTuple;
}
extern "C" {
    pub fn cass_tuple_free(tuple: *mut CassTuple);
}
extern "C" {
    pub fn cass_tuple_data_type(tuple: *const CassTuple)
        -> *const CassDataType;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_null(
        tuple: *mut CassTuple,
        index: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_int8(
        tuple: *mut CassTuple,
        index: usize,
        value: cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_int16(
        tuple: *mut CassTuple,
        index: usize,
        value: cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_int32(
        tuple: *mut CassTuple,
        index: usize,
        value: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_uint32(
        tuple: *mut CassTuple,
        index: usize,
        value: cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_int64(
        tuple: *mut CassTuple,
        index: usize,
        value: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_float(
        tuple: *mut CassTuple,
        index: usize,
        value: cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_double(
        tuple: *mut CassTuple,
        index: usize,
        value: cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_bool(
        tuple: *mut CassTuple,
        index: usize,
        value: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_string(
        tuple: *mut CassTuple,
        index: usize,
        value: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_string_n(
        tuple: *mut CassTuple,
        index: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_bytes(
        tuple: *mut CassTuple,
        index: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_custom(
        tuple: *mut CassTuple,
        index: usize,
        class_name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_custom_n(
        tuple: *mut CassTuple,
        index: usize,
        class_name: *const ::std::os::raw::c_char,
        class_name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_uuid(
        tuple: *mut CassTuple,
        index: usize,
        value: CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_inet(
        tuple: *mut CassTuple,
        index: usize,
        value: CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_decimal(
        tuple: *mut CassTuple,
        index: usize,
        varint: *const cass_byte_t,
        varint_size: usize,
        scale: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_duration(
        tuple: *mut CassTuple,
        index: usize,
        months: cass_int32_t,
        days: cass_int32_t,
        nanos: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_collection(
        tuple: *mut CassTuple,
        index: usize,
        value: *const CassCollection,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_tuple(
        tuple: *mut CassTuple,
        index: usize,
        value: *const CassTuple,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_tuple_set_user_type(
        tuple: *mut CassTuple,
        index: usize,
        value: *const CassUserType,
    ) -> CassError;
}
extern "C" {
    pub fn cass_user_type_new_from_data_type(
        data_type: *const CassDataType,
    ) -> *mut CassUserType;
}
extern "C" {
    pub fn cass_user_type_free(user_type: *mut CassUserType);
}
extern "C" {
    pub fn cass_user_type_data_type(
        user_type: *const CassUserType,
    ) -> *const CassDataType;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_null(
        user_type: *mut CassUserType,
        index: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_null_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_null_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int8(
        user_type: *mut CassUserType,
        index: usize,
        value: cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int8_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int8_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int16(
        user_type: *mut CassUserType,
        index: usize,
        value: cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int16_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int16_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int32(
        user_type: *mut CassUserType,
        index: usize,
        value: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int32_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int32_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_uint32(
        user_type: *mut CassUserType,
        index: usize,
        value: cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_uint32_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_uint32_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int64(
        user_type: *mut CassUserType,
        index: usize,
        value: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int64_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_int64_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_float(
        user_type: *mut CassUserType,
        index: usize,
        value: cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_float_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_float_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_double(
        user_type: *mut CassUserType,
        index: usize,
        value: cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_double_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_double_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_bool(
        user_type: *mut CassUserType,
        index: usize,
        value: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_bool_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_bool_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_string(
        user_type: *mut CassUserType,
        index: usize,
        value: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_string_n(
        user_type: *mut CassUserType,
        index: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_string_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_string_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_bytes(
        user_type: *mut CassUserType,
        index: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_bytes_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_bytes_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_custom(
        user_type: *mut CassUserType,
        index: usize,
        class_name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_custom_n(
        user_type: *mut CassUserType,
        index: usize,
        class_name: *const ::std::os::raw::c_char,
        class_name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_custom_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        class_name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_custom_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        class_name: *const ::std::os::raw::c_char,
        class_name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_uuid(
        user_type: *mut CassUserType,
        index: usize,
        value: CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_uuid_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_uuid_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_inet(
        user_type: *mut CassUserType,
        index: usize,
        value: CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_inet_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_inet_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_decimal(
        user_type: *mut CassUserType,
        index: usize,
        varint: *const cass_byte_t,
        varint_size: usize,
        scale: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_decimal_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        varint: *const cass_byte_t,
        varint_size: usize,
        scale: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_decimal_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        varint: *const cass_byte_t,
        varint_size: usize,
        scale: ::std::os::raw::c_int,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_duration(
        user_type: *mut CassUserType,
        index: usize,
        months: cass_int32_t,
        days: cass_int32_t,
        nanos: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_duration_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        months: cass_int32_t,
        days: cass_int32_t,
        nanos: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_duration_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        months: cass_int32_t,
        days: cass_int32_t,
        nanos: cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_collection(
        user_type: *mut CassUserType,
        index: usize,
        value: *const CassCollection,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_collection_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: *const CassCollection,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_collection_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const CassCollection,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_tuple(
        user_type: *mut CassUserType,
        index: usize,
        value: *const CassTuple,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_tuple_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: *const CassTuple,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_tuple_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const CassTuple,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_user_type(
        user_type: *mut CassUserType,
        index: usize,
        value: *const CassUserType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_user_type_by_name(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        value: *const CassUserType,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_user_type_set_user_type_by_name_n(
        user_type: *mut CassUserType,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const CassUserType,
    ) -> CassError;
}
extern "C" {
    pub fn cass_result_free(result: *const CassResult);
}
extern "C" {
    pub fn cass_result_row_count(result: *const CassResult) -> usize;
}
extern "C" {
    pub fn cass_result_column_count(result: *const CassResult) -> usize;
}
extern "C" {
    #[must_use]
    pub fn cass_result_column_name(
        result: *const CassResult,
        index: usize,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_result_column_type(
        result: *const CassResult,
        index: usize,
    ) -> CassValueType;
}
extern "C" {
    pub fn cass_result_column_data_type(
        result: *const CassResult,
        index: usize,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_result_first_row(result: *const CassResult) -> *const CassRow;
}
extern "C" {
    pub fn cass_result_has_more_pages(result: *const CassResult)
        -> cass_bool_t;
}
extern "C" {
    #[must_use]
    pub fn cass_result_paging_state_token(
        result: *const CassResult,
        paging_state: *mut *const ::std::os::raw::c_char,
        paging_state_size: *mut usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_error_result_free(error_result: *const CassErrorResult);
}
extern "C" {
    #[must_use]
    pub fn cass_error_result_code(
        error_result: *const CassErrorResult,
    ) -> CassError;
}
extern "C" {
    pub fn cass_error_result_consistency(
        error_result: *const CassErrorResult,
    ) -> CassConsistency;
}
extern "C" {
    pub fn cass_error_result_responses_received(
        error_result: *const CassErrorResult,
    ) -> cass_int32_t;
}
extern "C" {
    pub fn cass_error_result_responses_required(
        error_result: *const CassErrorResult,
    ) -> cass_int32_t;
}
extern "C" {
    pub fn cass_error_result_num_failures(
        error_result: *const CassErrorResult,
    ) -> cass_int32_t;
}
extern "C" {
    pub fn cass_error_result_data_present(
        error_result: *const CassErrorResult,
    ) -> cass_bool_t;
}
extern "C" {
    pub fn cass_error_result_write_type(
        error_result: *const CassErrorResult,
    ) -> CassWriteType;
}
extern "C" {
    #[must_use]
    pub fn cass_error_result_keyspace(
        error_result: *const CassErrorResult,
        keyspace: *mut *const ::std::os::raw::c_char,
        keyspace_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_error_result_table(
        error_result: *const CassErrorResult,
        table: *mut *const ::std::os::raw::c_char,
        table_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_error_result_function(
        error_result: *const CassErrorResult,
        function: *mut *const ::std::os::raw::c_char,
        function_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_error_num_arg_types(
        error_result: *const CassErrorResult,
    ) -> usize;
}
extern "C" {
    #[must_use]
    pub fn cass_error_result_arg_type(
        error_result: *const CassErrorResult,
        index: usize,
        arg_type: *mut *const ::std::os::raw::c_char,
        arg_type_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_iterator_free(iterator: *mut CassIterator);
}
extern "C" {
    pub fn cass_iterator_type(iterator: *mut CassIterator) -> CassIteratorType;
}
extern "C" {
    pub fn cass_iterator_from_result(
        result: *const CassResult,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_from_row(row: *const CassRow) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_from_collection(
        value: *const CassValue,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_from_map(value: *const CassValue)
        -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_from_tuple(
        value: *const CassValue,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_fields_from_user_type(
        value: *const CassValue,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_keyspaces_from_schema_meta(
        schema_meta: *const CassSchemaMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_tables_from_keyspace_meta(
        keyspace_meta: *const CassKeyspaceMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_materialized_views_from_keyspace_meta(
        keyspace_meta: *const CassKeyspaceMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_user_types_from_keyspace_meta(
        keyspace_meta: *const CassKeyspaceMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_functions_from_keyspace_meta(
        keyspace_meta: *const CassKeyspaceMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_aggregates_from_keyspace_meta(
        keyspace_meta: *const CassKeyspaceMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_fields_from_keyspace_meta(
        keyspace_meta: *const CassKeyspaceMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_columns_from_table_meta(
        table_meta: *const CassTableMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_indexes_from_table_meta(
        table_meta: *const CassTableMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_materialized_views_from_table_meta(
        table_meta: *const CassTableMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_fields_from_table_meta(
        table_meta: *const CassTableMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_columns_from_materialized_view_meta(
        view_meta: *const CassMaterializedViewMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_fields_from_materialized_view_meta(
        view_meta: *const CassMaterializedViewMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_fields_from_column_meta(
        column_meta: *const CassColumnMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_fields_from_index_meta(
        index_meta: *const CassIndexMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_fields_from_function_meta(
        function_meta: *const CassFunctionMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_fields_from_aggregate_meta(
        aggregate_meta: *const CassAggregateMeta,
    ) -> *mut CassIterator;
}
extern "C" {
    pub fn cass_iterator_next(iterator: *mut CassIterator) -> cass_bool_t;
}
extern "C" {
    pub fn cass_iterator_get_row(
        iterator: *const CassIterator,
    ) -> *const CassRow;
}
extern "C" {
    pub fn cass_iterator_get_column(
        iterator: *const CassIterator,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_iterator_get_value(
        iterator: *const CassIterator,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_iterator_get_map_key(
        iterator: *const CassIterator,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_iterator_get_map_value(
        iterator: *const CassIterator,
    ) -> *const CassValue;
}
extern "C" {
    #[must_use]
    pub fn cass_iterator_get_user_type_field_name(
        iterator: *const CassIterator,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_iterator_get_user_type_field_value(
        iterator: *const CassIterator,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_iterator_get_keyspace_meta(
        iterator: *const CassIterator,
    ) -> *const CassKeyspaceMeta;
}
extern "C" {
    pub fn cass_iterator_get_table_meta(
        iterator: *const CassIterator,
    ) -> *const CassTableMeta;
}
extern "C" {
    pub fn cass_iterator_get_materialized_view_meta(
        iterator: *const CassIterator,
    ) -> *const CassMaterializedViewMeta;
}
extern "C" {
    pub fn cass_iterator_get_user_type(
        iterator: *const CassIterator,
    ) -> *const CassDataType;
}
extern "C" {
    pub fn cass_iterator_get_function_meta(
        iterator: *const CassIterator,
    ) -> *const CassFunctionMeta;
}
extern "C" {
    pub fn cass_iterator_get_aggregate_meta(
        iterator: *const CassIterator,
    ) -> *const CassAggregateMeta;
}
extern "C" {
    pub fn cass_iterator_get_column_meta(
        iterator: *const CassIterator,
    ) -> *const CassColumnMeta;
}
extern "C" {
    pub fn cass_iterator_get_index_meta(
        iterator: *const CassIterator,
    ) -> *const CassIndexMeta;
}
extern "C" {
    #[must_use]
    pub fn cass_iterator_get_meta_field_name(
        iterator: *const CassIterator,
        name: *mut *const ::std::os::raw::c_char,
        name_length: *mut usize,
    ) -> CassError;
}
extern "C" {
    pub fn cass_iterator_get_meta_field_value(
        iterator: *const CassIterator,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_row_get_column(
        row: *const CassRow,
        index: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_row_get_column_by_name(
        row: *const CassRow,
        name: *const ::std::os::raw::c_char,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_row_get_column_by_name_n(
        row: *const CassRow,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *const CassValue;
}
extern "C" {
    pub fn cass_value_data_type(value: *const CassValue)
        -> *const CassDataType;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_int8(
        value: *const CassValue,
        output: *mut cass_int8_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_int16(
        value: *const CassValue,
        output: *mut cass_int16_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_int32(
        value: *const CassValue,
        output: *mut cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_uint32(
        value: *const CassValue,
        output: *mut cass_uint32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_int64(
        value: *const CassValue,
        output: *mut cass_int64_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_float(
        value: *const CassValue,
        output: *mut cass_float_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_double(
        value: *const CassValue,
        output: *mut cass_double_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_bool(
        value: *const CassValue,
        output: *mut cass_bool_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_uuid(
        value: *const CassValue,
        output: *mut CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_inet(
        value: *const CassValue,
        output: *mut CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_string(
        value: *const CassValue,
        output: *mut *const ::std::os::raw::c_char,
        output_size: *mut usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_bytes(
        value: *const CassValue,
        output: *mut *const cass_byte_t,
        output_size: *mut usize,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_decimal(
        value: *const CassValue,
        varint: *mut *const cass_byte_t,
        varint_size: *mut usize,
        scale: *mut cass_int32_t,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_value_get_duration(
        value: *const CassValue,
        months: *mut cass_int32_t,
        days: *mut cass_int32_t,
        nanos: *mut cass_int64_t,
    ) -> CassError;
}
extern "C" {
    pub fn cass_value_type(value: *const CassValue) -> CassValueType;
}
extern "C" {
    pub fn cass_value_is_null(value: *const CassValue) -> cass_bool_t;
}
extern "C" {
    pub fn cass_value_is_collection(value: *const CassValue) -> cass_bool_t;
}
extern "C" {
    pub fn cass_value_is_duration(value: *const CassValue) -> cass_bool_t;
}
extern "C" {
    pub fn cass_value_item_count(collection: *const CassValue) -> usize;
}
extern "C" {
    pub fn cass_value_primary_sub_type(
        collection: *const CassValue,
    ) -> CassValueType;
}
extern "C" {
    pub fn cass_value_secondary_sub_type(
        collection: *const CassValue,
    ) -> CassValueType;
}
extern "C" {
    pub fn cass_uuid_gen_new() -> *mut CassUuidGen;
}
extern "C" {
    pub fn cass_uuid_gen_new_with_node(node: cass_uint64_t)
        -> *mut CassUuidGen;
}
extern "C" {
    pub fn cass_uuid_gen_free(uuid_gen: *mut CassUuidGen);
}
extern "C" {
    pub fn cass_uuid_gen_time(
        uuid_gen: *mut CassUuidGen,
        output: *mut CassUuid,
    );
}
extern "C" {
    pub fn cass_uuid_gen_random(
        uuid_gen: *mut CassUuidGen,
        output: *mut CassUuid,
    );
}
extern "C" {
    pub fn cass_uuid_gen_from_time(
        uuid_gen: *mut CassUuidGen,
        timestamp: cass_uint64_t,
        output: *mut CassUuid,
    );
}
extern "C" {
    pub fn cass_uuid_min_from_time(time: cass_uint64_t, output: *mut CassUuid);
}
extern "C" {
    pub fn cass_uuid_max_from_time(time: cass_uint64_t, output: *mut CassUuid);
}
extern "C" {
    pub fn cass_uuid_timestamp(uuid: CassUuid) -> cass_uint64_t;
}
extern "C" {
    pub fn cass_uuid_version(uuid: CassUuid) -> cass_uint8_t;
}
extern "C" {
    pub fn cass_uuid_string(
        uuid: CassUuid,
        output: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[must_use]
    pub fn cass_uuid_from_string(
        str_: *const ::std::os::raw::c_char,
        output: *mut CassUuid,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_uuid_from_string_n(
        str_: *const ::std::os::raw::c_char,
        str_length: usize,
        output: *mut CassUuid,
    ) -> CassError;
}
extern "C" {
    pub fn cass_timestamp_gen_server_side_new() -> *mut CassTimestampGen;
}
extern "C" {
    pub fn cass_timestamp_gen_monotonic_new() -> *mut CassTimestampGen;
}
extern "C" {
    pub fn cass_timestamp_gen_monotonic_new_with_settings(
        warning_threshold_us: cass_int64_t,
        warning_interval_ms: cass_int64_t,
    ) -> *mut CassTimestampGen;
}
extern "C" {
    pub fn cass_timestamp_gen_free(timestamp_gen: *mut CassTimestampGen);
}
extern "C" {
    pub fn cass_retry_policy_default_new() -> *mut CassRetryPolicy;
}
extern "C" {
    pub fn cass_retry_policy_downgrading_consistency_new(
    ) -> *mut CassRetryPolicy;
}
extern "C" {
    pub fn cass_retry_policy_fallthrough_new() -> *mut CassRetryPolicy;
}
extern "C" {
    pub fn cass_retry_policy_logging_new(
        child_retry_policy: *mut CassRetryPolicy,
    ) -> *mut CassRetryPolicy;
}
extern "C" {
    pub fn cass_retry_policy_free(policy: *mut CassRetryPolicy);
}
extern "C" {
    pub fn cass_custom_payload_new() -> *mut CassCustomPayload;
}
extern "C" {
    pub fn cass_custom_payload_free(payload: *mut CassCustomPayload);
}
extern "C" {
    pub fn cass_custom_payload_set(
        payload: *mut CassCustomPayload,
        name: *const ::std::os::raw::c_char,
        value: *const cass_byte_t,
        value_size: usize,
    );
}
extern "C" {
    pub fn cass_custom_payload_set_n(
        payload: *mut CassCustomPayload,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const cass_byte_t,
        value_size: usize,
    );
}
extern "C" {
    pub fn cass_custom_payload_remove(
        payload: *mut CassCustomPayload,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cass_custom_payload_remove_n(
        payload: *mut CassCustomPayload,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    );
}
extern "C" {
    pub fn cass_consistency_string(
        consistency: CassConsistency,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cass_write_type_string(
        write_type: CassWriteType,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cass_error_desc(error: CassError) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cass_log_cleanup();
}
extern "C" {
    pub fn cass_log_set_level(log_level: CassLogLevel);
}
extern "C" {
    pub fn cass_log_set_callback(
        callback: CassLogCallback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn cass_log_set_queue_size(queue_size: usize);
}
extern "C" {
    pub fn cass_log_level_string(
        log_level: CassLogLevel,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cass_inet_init_v4(address: *const cass_uint8_t) -> CassInet;
}
extern "C" {
    pub fn cass_inet_init_v6(address: *const cass_uint8_t) -> CassInet;
}
extern "C" {
    pub fn cass_inet_string(
        inet: CassInet,
        output: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[must_use]
    pub fn cass_inet_from_string(
        str_: *const ::std::os::raw::c_char,
        output: *mut CassInet,
    ) -> CassError;
}
extern "C" {
    #[must_use]
    pub fn cass_inet_from_string_n(
        str_: *const ::std::os::raw::c_char,
        str_length: usize,
        output: *mut CassInet,
    ) -> CassError;
}
extern "C" {
    pub fn cass_date_from_epoch(epoch_secs: cass_int64_t) -> cass_uint32_t;
}
extern "C" {
    pub fn cass_time_from_epoch(epoch_secs: cass_int64_t) -> cass_int64_t;
}
extern "C" {
    pub fn cass_date_time_to_epoch(
        date: cass_uint32_t,
        time: cass_int64_t,
    ) -> cass_int64_t;
}
extern "C" {
    pub fn cass_alloc_set_functions(
        malloc_func: CassMallocFunction,
        realloc_func: CassReallocFunction,
        free_func: CassFreeFunction,
    );
}
pub type __builtin_va_list = [struct___va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_struct___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<struct___va_list_tag> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct___va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(struct___va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<struct___va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(struct___va_list_tag))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct___va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct___va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct___va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct___va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
